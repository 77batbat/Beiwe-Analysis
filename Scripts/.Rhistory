source_filepath    = "C:/Users/Ian/Documents/Work/JP/Beiwe/Github/Beiwe-Analysis"
data_filepath      = "C:/Users/Ian/Documents/Work/JP/MGH_Beiwe/Data"
output_filepath    = "C:/Users/Ian/Documents/Work/JP/MGH_Beiwe/Output"
# source_filepath    = "C:/Phoenix/School/Harvard/Research/Beiwe/Code/Beiwe-Analysis"
# data_filepath      = "C:/Phoenix/School/Harvard/Research/Beiwe/Studies/John_Schizophrenia/Data/2017.01.09"
# output_filepath    = "C:/Phoenix/School/Harvard/Research/Beiwe/Studies/John_Schizophrenia/Output"
### Constants:
acc_binsize=5 # width of bin in minutes used for combining accelerometer data
acc_millisecond_divider = 30*1000
gps_millisecond_divider = 30*1000
acc_frequency = 10
gps_frequency = 1
acc_burst_duration = 60
gps_burst_duration = 60
acc_break_duration = 60
gps_break_duration = 60*10
# Source all files
source(paste(source_filepath, "Utility/Initialize.R",sep="/"))
warnings()
for(patient_name in patient_names){
print(patient_name)
# Preprocess Data
surveys_preprocessing(patient_name)
text_preprocessing(patient_name)
calls_preprocessing(patient_name)
powerstate_preprocessing(patient_name)
accelerometer_preprocessing(patient_name, minutes = acc_binsize)
GPS_preprocessing(patient_name)
find_bursts(patient_name, stream = "accelerometer", acc_millisecond_divider)
find_bursts(patient_name, stream = "GPS",           gps_millisecond_divider)
# Process Data
GPS_imputation(patient_name,nreps=1)
CreateMobilityFeatures(patient_name)
#warp_GPS(seed = 1)
#textlocs  = text_locations (textmat,  mobmat)
#calllocs  = call_locations (callmat,  mobmat)
#statelocs = powerstate_locations(statemat, mobmat)
# Results
ContinuousDataCollectionTracks(patient_name, acc_binsize)
#location_plot(mobmat, textmat, callmat, statemat, accmat5, textlocs, calllocs, statelocs, daynames)
}
patient_names
data_filepath      = "C:/Users/Ian/Documents/Work/JP/MGH_Beiwe/Data"
acc_binsize=5 # width of bin in minutes used for combining accelerometer data
acc_millisecond_divider = 30*1000
gps_millisecond_divider = 30*1000
acc_frequency = 10
gps_frequency = 1
acc_burst_duration = 60
gps_burst_duration = 60
acc_break_duration = 60
gps_break_duration = 60*10
# Source all files
source(paste(source_filepath, "Utility/Initialize.R",sep="/"))
patient_names
for(patient_name in patient_names){
print(patient_name)
# Preprocess Data
surveys_preprocessing(patient_name)
text_preprocessing(patient_name)
calls_preprocessing(patient_name)
powerstate_preprocessing(patient_name)
accelerometer_preprocessing(patient_name, minutes = acc_binsize)
GPS_preprocessing(patient_name)
find_bursts(patient_name, stream = "accelerometer", acc_millisecond_divider)
find_bursts(patient_name, stream = "GPS",           gps_millisecond_divider)
# Process Data
GPS_imputation(patient_name,nreps=1)
CreateMobilityFeatures(patient_name)
#warp_GPS(seed = 1)
#textlocs  = text_locations (textmat,  mobmat)
#calllocs  = call_locations (callmat,  mobmat)
#statelocs = powerstate_locations(statemat, mobmat)
# Results
ContinuousDataCollectionTracks(patient_name, acc_binsize)
#location_plot(mobmat, textmat, callmat, statemat, accmat5, textlocs, calllocs, statelocs, daynames)
}
patient_names
print(patient_name)
ContinuousDataCollectionTracks(patient_name, acc_binsize)
patient_names
patient_name<="ufyj2rup"
for(patient_name in patient_names){
if(patient_name<="ufyj2rup"){next}
print(patient_name)
# Preprocess Data
surveys_preprocessing(patient_name)
text_preprocessing(patient_name)
calls_preprocessing(patient_name)
powerstate_preprocessing(patient_name)
accelerometer_preprocessing(patient_name, minutes = acc_binsize)
GPS_preprocessing(patient_name)
find_bursts(patient_name, stream = "accelerometer", acc_millisecond_divider)
find_bursts(patient_name, stream = "GPS",           gps_millisecond_divider)
# Process Data
GPS_imputation(patient_name,nreps=1)
CreateMobilityFeatures(patient_name)
#warp_GPS(seed = 1)
#textlocs  = text_locations (textmat,  mobmat)
#calllocs  = call_locations (callmat,  mobmat)
#statelocs = powerstate_locations(statemat, mobmat)
# Results
ContinuousDataCollectionTracks(patient_name, acc_binsize)
#location_plot(mobmat, textmat, callmat, statemat, accmat5, textlocs, calllocs, statelocs, daynames)
}
daily_features()
dat=read.csv("C:/Users/Ian/Documents/Work/JP/Schizophrenia/Output/Results/Group/feature_matrix_anomalies_trunc3.csv",stringsAsFactors=F)
hosp_ids = c("vh7ab23d","ety2hu13","v77ngnht")
hosp13_dates = c("2017-01-13","2016-09-03","2017-02-16")
nsig=0
ntot=0
for(i in 1:length(hosp_ids)){
ID = hosp_ids[1]
#rIDs = intersect(which(dat[,1]==ID),which(dat[,2]<=hosp13_dates[i]))
rIDs = intersect(which(dat[,1]==ID),which(dat[,2]>hosp13_dates[i]))
nsig=nsig+length(which(dat$SVY_pval[rIDs]<0.05))
ntot=ntot+length(which(!is.na(dat$SVY_pval[rIDs])))
nsig=nsig+length(which(dat$SOC_pval[rIDs]<0.05))
ntot=ntot+length(which(!is.na(dat$SOC_pval[rIDs])))
nsig=nsig+length(which(dat$MOB_pval[rIDs]<0.05))
ntot=ntot+length(which(!is.na(dat$MOB_pval[rIDs])))
}
rateh=nsig/ntot
nsig=0
ntot=0
for(i in 1:length(hosp_ids)){
ID = hosp_ids[1]
rIDs = intersect(which(dat[,1]==ID),which(dat[,2]<=hosp13_dates[i]))
#rIDs = intersect(which(dat[,1]==ID),which(dat[,2]>hosp13_dates[i]))
nsig=nsig+length(which(dat$SVY_pval[rIDs]<0.05))
ntot=ntot+length(which(!is.na(dat$SVY_pval[rIDs])))
nsig=nsig+length(which(dat$SOC_pval[rIDs]<0.05))
ntot=ntot+length(which(!is.na(dat$SOC_pval[rIDs])))
nsig=nsig+length(which(dat$MOB_pval[rIDs]<0.05))
ntot=ntot+length(which(!is.na(dat$MOB_pval[rIDs])))
}
ratenh=nsig/ntot
rateh
ratenh
rateh*14
ratenh*14
pbinom
pbinom(1,14,rateh)
pbinom(0,14,rateh)
pbinom(1,14,rateh,lower.tail=F)
?pbinom
pbinom(0,14,rateh,lower.tail=F)
pbinom(0,14,rateh,lower.tail=F)
pbinom(0,14,ratenh,lower.tail=F)
pbinom(0,14*3,rateh,lower.tail=F)
pbinom(0,14*3,ratenh,lower.tail=F)
rateh
pbinom(0,7*3,rateh,lower.tail=F)
pbinom(0,2*3,rateh,lower.tail=F)
